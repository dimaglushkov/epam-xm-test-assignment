// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/ports/repository.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	domain "github.com/dimaglushkov/epam-xm-test-assignment/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockRepository) CreateCompany(ctx context.Context, company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(error)

	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockRepositoryMockRecorder) CreateCompany(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockRepository)(nil).CreateCompany), ctx, company)
}

// DeleteCompany mocks base method.
func (m *MockRepository) DeleteCompany(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", ctx, id)
	ret0, _ := ret[0].(error)

	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockRepositoryMockRecorder) DeleteCompany(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockRepository)(nil).DeleteCompany), ctx, id)
}

// GetCompanyById mocks base method.
func (m *MockRepository) GetCompanyByID(ctx context.Context, id uuid.UUID) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", ctx, id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockRepositoryMockRecorder) GetCompanyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockRepository)(nil).GetCompanyByID), ctx, id)
}

// Migrate mocks base method.
func (m *MockRepository) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)

	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockRepositoryMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockRepository)(nil).Migrate))
}

// UpdateCompany mocks base method.
func (m *MockRepository) UpdateCompany(ctx context.Context, id uuid.UUID, fieldsToUpdate map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, id, fieldsToUpdate)
	ret0, _ := ret[0].(error)

	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockRepositoryMockRecorder) UpdateCompany(ctx, id, fieldsToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockRepository)(nil).UpdateCompany), ctx, id, fieldsToUpdate)
}
