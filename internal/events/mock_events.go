// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/ports/events.go

// Package events is a generated GoMock package.
package events

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventsWriter is a mock of EventsWriter interface.
type MockEventsWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEventsWriterMockRecorder
}

// MockEventsWriterMockRecorder is the mock recorder for MockEventsWriter.
type MockEventsWriterMockRecorder struct {
	mock *MockEventsWriter
}

// NewMockEventsWriter creates a new mock instance.
func NewMockEventsWriter(ctrl *gomock.Controller) *MockEventsWriter {
	mock := &MockEventsWriter{ctrl: ctrl}
	mock.recorder = &MockEventsWriterMockRecorder{mock}

	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsWriter) EXPECT() *MockEventsWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventsWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventsWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventsWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockEventsWriter) Write(ctx context.Context, data ...any) error {
	m.ctrl.T.Helper()

	varargs := []interface{}{ctx}
	for _, a := range data {
		varargs = append(varargs, a)
	}

	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(error)

	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockEventsWriterMockRecorder) Write(ctx interface{}, data ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()

	varargs := append([]interface{}{ctx}, data...)

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEventsWriter)(nil).Write), varargs...)
}
